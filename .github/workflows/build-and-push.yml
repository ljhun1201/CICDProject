name: Build and Push to ECR and GCR

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  USE_GKE_GCLOUD_AUTH_PLUGIN: True
  AWS_REGION: ap-northeast-2
  GCP_REGION: asia-northeast3
  GCR_REPO_NAME: app-images
  IMAGE1_NAME: user-registration-service
  IMAGE2_NAME: user-login-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Spring Boot App - User Registration Service
        run: |
          cd ./backend-root/user-registration-service
          chmod +x ./gradlew
          ./gradlew build

      - name: Build Spring Boot App - User Login Service
        run: |
          cd ./backend-root/user-login-service
          chmod +x ./gradlew
          ./gradlew build

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/S3WebRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Login to GCR
        run: |
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

      - name: Build and Tag Docker Images
        run: |
          docker build -t $IMAGE1_NAME:latest ./backend-root/user-registration-service
          docker tag $IMAGE1_NAME:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE1_NAME:latest
          docker tag $IMAGE1_NAME:latest $GCP_REGION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$IMAGE1_NAME:latest
          docker build -t $IMAGE2_NAME:latest ./backend-root/user-login-service
          docker tag $IMAGE2_NAME:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE2_NAME:latest
          docker tag $IMAGE2_NAME:latest $GCP_REGION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$IMAGE2_NAME:latest

      - name: Push Docker Images to ECR and GCR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE1_NAME:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE2_NAME:latest
          docker push $GCP_REGION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$IMAGE1_NAME:latest
          docker push $GCP_REGION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$IMAGE2_NAME:latest

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin -q

      - name: Update EKS Deployment
        run: |
          aws eks update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} --region $AWS_REGION
          kubectl set image deployment/app-one app-one-container=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE1_NAME:latest -n default
          kubectl set image deployment/app-two app-two-container=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE2_NAME:latest -n default
          kubectl rollout restart deployment app-one -n default
          kubectl rollout restart deployment app-two -n default

      - name: Update GKE Deployment
        run: |
          gcloud container clusters get-credentials ${{ secrets.GCP_GKE_CLUSTER_NAME }} --region $GCP_REGION --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.GCP_REGION }}_${{ secrets.GCP_GKE_CLUSTER_NAME }}
          kubectl set image deployment/app-one app-one-container=$GCP_REGION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$IMAGE1_NAME:latest -n default
          kubectl set image deployment/app-two app-two-container=$GCP_REGION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$IMAGE2_NAME:latest -n default
          kubectl rollout restart deployment app-one -n default
          kubectl rollout restart deployment app-two -n default
